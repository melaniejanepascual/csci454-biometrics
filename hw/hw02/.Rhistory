select(dep_delay)
filter(dep_delay > 60)
flights %>%
select(dep_delay) %>%
filter(dep_delay > 60)
flights %>%
select(dep_delay) %>%
filter(dep_delay > 60) %>%
group_by(carrier)
summarise(arrange(carrier))
flights %>%
select(dep_delay) %>%
filter(dep_delay > 60) %>%
group_by(carrier)
flights$carrier
flights %>%
select(dep_delay) %>%
filter(dep_delay > 60) %>%
group_by(carrier) %>%
summarize(mean(flights$carrier), na,rm=TRUE)
flights %>%
group_by(carrier) %>%
summarize(carrier.avg = mean(dep_delay > 60 , na,rm=TRUE)) %>%
arrange(desc(carrier.avg)) %>%
mutate(Rank = rank(-carrier.avg))
elayed more than an hour. (dep delay)
flights %>%
group_by(carrier) %>%
summarize(carrier.avg = mean(dep_delay > 60 , na.rm=TRUE)) %>%
arrange(desc(carrier.avg)) %>%
mutate(Rank = rank(-carrier.avg))
flights %>%
group_by(carrier) %>%
summarize(carrier.avg = mean(dep_delay > 60 , na.rm=TRUE)) %>%
arrange(desc(carrier.avg)) %>%
mutate(Rank = rank(-carrier.avg)) %>%
filter(Rank <= 10) %>%
ggplot(mapping = aes(x = carrier, carrier.avg)) + geom_bar(stat = "identity")
# Construct a bar graph of the "Top 10" carriers with the highest proportion
# of flights delayed more than an hour. (dep delay)
flights %>%
group_by(carrier) %>%
summarize(carrier.avg = mean(dep_delay > 60 , na.rm=TRUE)) %>%
arrange(desc(carrier.avg)) %>%
mutate(Rank = rank(-carrier.avg)) %>%
filter(Rank <= 10) %>%
ggplot(mapping = aes(x = reorder(carrier, carrier.avg), carrier.avg)) + geom_bar(stat = "identity")
flights %>%
group_by(carrier) %>%
summarize(carrier.avg = mean(dep_delay > 60 , na.rm=TRUE)) %>%
arrange(desc(carrier.avg)) %>%
mutate(Rank = rank(-carrier.avg)) %>%
filter(Rank <= 10) %>%
ggplot(mapping = aes(x = reorder(carrier, carrier.avg), carrier.avg)) +
geom_bar(stat = "identity", aes(fill = carrier))
## Create a function
favNum <- function(x) {
num <- paste(c("Alex's favorite number is", x, "."), collapse = " ")
return(num)
}
favNum(12)
t.test(1)
t.test(10()
z
t.test(10)
?t.test
t.test(10, 30, 50)
t.test2 <- function(x, mu) {
x.bar  <- mean(x, na.rm =TRUE)
s      <- sd(x)
n      <- length(x)
t.stat <- (x.bar-mu)/(s/sqrt(n))
p.val <- pt(t.stat, n-1)
return(p.val)
}
View(favNum)
mj <- 3
paste(c("MJ", "likes", "the", "num", mj), collapse=" ")
mj.fav.num <- 3
paste(c("MJ", "likes", "the", "num", mj), collapse=" ")
#solution 2
super.dataset <- NULL
for (i in 1:3) {
# read in dataset
current.dataset <- read.csv(file = paste(c("dataset", i, ".csv"),
collapse=""))
# attach dataset to other datasets to make super dataset
super.dataset <- rbind(super.dataset, current.dataset)
}
SAT <- rnorm(100000, 600, 100)
## Try breaking the central limit theorem
# small sample size
SAT <- rnorm(100000, 600, 100)
mean.vector <- NULL
for(i in 1:100000){
mean.vector[i] <- mean(sample(SAT, 2))
}
hist(mean.vector)
# small sample size & weird population distribution
test.scores <-c(98.95,92,88,86,84,84, 20,14)
mean.vector <- NULL
for(i in 1:100000){
mean.vector[i] <- mean(sample(test.scores, 2, replace = TRUE))
}
hist(mean.vector)
#sample size 50
test.scores3 <-c(98.95,92,88,86,84,84, 20,14)
mean.vector <- NULL
for(i in 1:100000){
mean.vector[i] <- mean(sample(test.scores3, 50, replace = TRUE))
}
hist(mean.vector)
library(nycflights13)
ggplot(flights, aes(dep_delay)) + geom_histogram()
library(nycflights13)
library(ggplot2)
ggplot(flights, aes(dep_delay)) + geom_histogram()
ggplot(flights, aes(dep_delay)) + geom_histogram()
flights %>%
filter(carrier == "DL") %>%
summarize(mean.delay = mean(dep_delay, na.rm = TRUE, n=n()))
39.74/sqrt(48110)
pnorm(9.26, 5, .18, lower.tail=FALSE)
39.74/sqrt(48110)
pnorm(9.26, 5, .18, lower.tail=FALSE)
wait.times <- c(5,1,11,2,8,0,1,4,6,3,13,9,8,15,7)
music <- rep(c("Ad", "Muzak", "Classical"), each=5)
music
music
wait.times <- c(5,1,11,2,8,0,1,4,6,3,13,9,8,15,7)
wait.times <- as.numeric(wait.times)
music <- rep(c("Ad", "Muzak", "Classical"), each=5)
music.data <- as.data.frame(cbind(wait.times, music))
model1 <- aov(wait.times~music, data=music.data)
wait.times <- c(5,1,11,2,8,0,1,4,6,3,13,9,8,15,7)
wait.times <- as.numeric(wait.times)
music <- rep(c("Ad", "Muzak", "Classical"), each=5)
music.data <- as.data.frame(cbind(wait.times, music))
## change from factors to numeric
music.data$wait.times2 <- as.numeric(wait.times2)
## Create ANOVA model
## y is quantitative variable (wait-times) x is categorical group (music)
model1 <- aov(wait.times2~music, data=music.data)
summary(model)
wait.times <- c(5,1,11,2,8,0,1,4,6,3,13,9,8,15,7)
wait.times <- as.numeric(wait.times)
music <- rep(c("Ad", "Muzak", "Classical"), each=5)
music.data <- as.data.frame(cbind(wait.times, music))
## change from factors to numeric
music.data$wait.times2 <- as.numeric(wait.times2)
## Create ANOVA model
## y is quantitative variable (wait-times) x is categorical group (music)
model1 <- aov(wait.times2~music, data=music.data)
summary(model1)
wait.times2 <- c(5,1,11,2,8,0,1,4,6,3,13,9,8,15,7)
music <- rep(c("Ad", "Muzak", "Classical"), each=5)
music.data <- as.data.frame(cbind(wait.times, music))
## change from factors to numeric
music.data$wait.times2 <- as.numeric(wait.times2)
## Create ANOVA model
## y is quantitative variable (wait-times) x is categorical group (music)
model1 <- aov(wait.times2~music, data=music.data)
summary(model1)
#Benjamini test
p.values <- c(.06, .01, .002)
p.adjust(p.values, method = "BH")
wait.times2 <- c(5,1,11,2,8,0,1,4,6,3,13,9,8,15,7)
music <- rep(c("Ad", "Muzak", "Classical"), each=5)
music.data <- as.data.frame(cbind(wait.times, music))
## change from factors to numeric
music.data$wait.times2 <- as.numeric(wait.times2)
## Create ANOVA model
## y is quantitative variable (wait-times) x is categorical group (music)
model1 <- aov(wait.times2~music, data=music.data)
summary(model1)
?as.numberic
?as.numeric
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
skittles <- data.frame(trt = c("Purple", "Green", "Red", "Yellow", "Orange"),
outcome = c(18, 20, 19, 20, 25))
skittles
ggplot(skittles, aes(yum, count)) +
geom_col()
skittles <- data.frame(yum = c("Purple", "Green", "Red", "Yellow", "Orange"),
count = c(18, 20, 19, 20, 25))
ggplot(skittles, aes(yum, count)) +
geom_col()
skittles <- data.frame(skittle.color = c("Purple", "Green", "Red", "Yellow", "Orange"),
count = c(18, 20, 19, 20, 25))
ggplot(skittles, aes(skittle.color, count)) + geom_col()
# Barplot
skittle.bar<- ggplot(skittles, aes(x="", y=count, fill=skittle.color))+
geom_bar(width = 1, stat = "identity")
skittle.bar
skittle.pie <- skittle.bar + coord_polar("y", start=0)
skittle.pie
skittle.pie + scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
library("ggplot2")
skittles <- data.frame(skittle.color = c("Purple", "Green", "Red", "Yellow", "Orange"),
count = c(18, 20, 19, 20, 25))
ggplot(skittles, aes(skittle.color, count)) + geom_col()
skittle.bar<- ggplot(skittles, aes(x="", y=count, fill=skittle.color))+
geom_bar(width = 1, stat = "identity")
skittle.pie <- skittle.bar + coord_polar("y", start=0)
skittle.pie + scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
ggplot(skittles, aes(skittle.color, count)) + geom_col()
skittle.bar<- ggplot(skittles, aes(x="", y=count, fill=skittle.color))+
geom_bar(width = 1, stat = "identity")
#Pie Chart
skittle.pie <- skittle.bar + coord_polar("y", start=0) + scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
skittle.pie <- skittle.bar + coord_polar("y", start=0) + scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
skittle.pie
ggplot(skittles, aes(skittle.color, count)) + geom_col()
skittle.bar<- ggplot(skittles, aes(x="", y=count, fill=skittle.color))+
geom_bar(width = 1, stat = "identity") + scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
skittles <- data.frame(skittle.color = c("Purple", "Green", "Red", "Yellow", "Orange"),
count = c(18, 20, 19, 20, 25))
#Bar Plot
ggplot(skittles, aes(skittle.color, count)) + geom_col()
skittle.bar<- ggplot(skittles, aes(x="", y=count, fill=skittle.color))+
geom_bar(width = 1, stat = "identity") +
scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
new_name<- c("Orange","Green","Blue","Yellow","Brown","Red")
new_prop_m <- prop_m %>%
as.data.frame()
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
new_name<- c("Orange","Green","Blue","Yellow","Brown","Red")
new_prop_m <- prop_m %>%
as.data.frame()
prop_m <- c(20,22,26,26,16,28)
pv <- c(0.5683,0.9092,0.493,0.493,1,0.003238)
orange <- binom.test(20,138,.1667) #not equal to p
green <- binom.test(22,138,.1667) #not equal to p
blue <- binom.test(26,138,.1667) #not equal to p
yellow <- binom.test(26,138,.1667) #not equal to p
brown <- binom.test(16,138,.1167) #not equal to p
red <- binom.test(28,138,.1167) #not equal to p
new_name<- c("Orange","Green","Blue","Yellow","Brown","Red")
new_prop_m <- prop_m %>%
as.data.frame()
new_name <- new_name %>%
as.data.frame()
pv <- pv %>%
as.data.frame()
data <- cbind(new_name,pv)
ggplot(data = data, aes(x = new_name, y =.)) +
geom_bar(stat = "identity") +
xlab("M&M colors") +
ylab("Number of M&Ms")
skittles <- data.frame(skittle.color = c("Purple", "Green", "Red", "Yellow", "Orange"),
count = c(18, 20, 19, 20, 25))
#Bar Plot
ggplot(skittles, aes(skittle.color, count)) + geom_col()
skittle.bar<- ggplot(skittles, aes(x="", y=count, fill=skittle.color)) +
geom_bar(width = 1, stat = "identity") + xlab("Color") + ylab("Count")
skittle.bar
#Pie Chart
skittle.pie <- skittle.bar + coord_polar("y", start=0)
skittle.pie + scale_fill_manual(values=c("green", "orange", "purple", "red", "yellow"))
skittle.pie
library(shiny)
library(babynames)
install.packages(shiny)
install.packages("shiny")
install.packages("babynames")
library(shiny)
library(babynames)
View(babynames)
library(shiny)
library(babynames)
runApp('Developments/math216-datascience/lectures/10.25/10.25')
?sliderInput
runApp('Developments/math216-datascience/lectures/10.25/10.25')
runApp('Developments/math216-datascience/lectures/10.25/10.25')
runApp('Developments/math216-datascience/lectures/10.25/10.25')
runApp('Developments/math216-datascience/lectures/10.25/10.25')
runApp('Developments/math216-datascience/lectures/10.25/10.25')
?plotOutput
runApp('Developments/math216-datascience/lectures/10.25/10.25')
runApp('Developments/math216-datascience/lectures/10.25/10.25')
?checkboxGroupInput
runApp('Developments/math216-datascience/lectures/10.25/checkbox')
?textInput
?colourInput
??colourInput
?selectInput
shiny::runApp('Developments/math216-datascience/lectures/10.27/10.27')
library(shiny)
sliderInput(inputId = "slider", label = "Choose a number",
value = 5000, min = 1, max = 10000),
textInput(inputId = "title", label = "Enter a title"),
plotOutput("hist")
plotOutput("hist")
library(shiny)
ui <- fluidPage{
sliderInput(inputId = "slider", label = "Choose a number",
value = 5000, min = 1, max = 10000)
textInput(inputId = "title", label = "Enter a title")
plotOutput("hist")
}
server <- function(input, output) {
output$hist <- renderPlot({
x <- data.frame(numbers = rnorm(input$slider))
ggplot(x, aes(numbers)) + geom_histogram() + fftitle(input$title)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage{
sliderInput(inputId = "slider", label = "Choose a number",
value = 5000, min = 1, max = 10000)
textInput(inputId = "title", label = "Enter a title")
plotOutput("hist")
}
runApp('Developments/math216-datascience/lectures/10.27/10.27')
runApp('Developments/math216-datascience/lectures/10.27/10.27')
runApp('Developments/math216-datascience/lectures/10.27/10.27')
runApp('Developments/math216-datascience/lectures/10.27/10.27')
?isolate
install.packages("babynames")
runApp('Developments/math216-datascience/lectures/10.27/babyname')
install.packages("babyname")
install.packages("babynames")
library(shiny)
library(babynames)
library(ggplot2)
library(tidyverse)
?babynames
babynames %>%
group_by(year)
babynames %>%
select(year)
babynames %>%
filter(year)
testYear <- 1977
babynames %>%
filter(year == testYear)
testYear <- 1977
babynames %>%
filter(year == testYear)
babynames %>%
filter(year == testYear)
arrange(prop)
library(shiny)
library(babynames)
library(ggplot2)
library(tidyverse)
testYear <- 1977
babynames %>%
filter(year == testYear)
arrange(year, prop)
#  select(sex, name, prop)
prop
babynames$prop
babynames %>%
filter(year == testYear)
arrange(year, prop)
babynames %>%
filter(year == testYear)
arrange(year, prop)
runApp('Developments/math216-datascience/lectures/10.27/10.27')
runApp('Developments/math216-datascience/lectures/10.27/babyname')
setwd("~/Developments/csci454-biometrics/hw/hw02")
install.packages("png")
library("png")
setwd("~/Developments/csci454-biometrics")
install.packages("png")
install.packages("png")
install.packages(png)
?
a
library("png")
?s
library("png")
install.packages("png")
install.packages("png")
img <- readIMG("~/Developments/csci454-biometrics/IMG_0996.img")
img <- readIMG("~/Developments/csci454-biometrics/IMG_0996.img")
library("png")
img <- readIMG("~/Developments/csci454-biometrics/IMG_0996.img")
img <- readIMG("~/Developments/csci454-biometrics/IMG_0996.JPG")
img <- readJPG("~/Developments/csci454-biometrics/IMG_0996.JPG")
img <- readPNG("~/Developments/csci454-biometrics/IMG_0996.PNG")
img <- readPNG("~/Developments/csci454-biometrics/hw02/IMG_0996.PNG")
it.me <- readPNG("~/Developments/csci454-biometrics/hw/hw02/IMG_0996.PNG")
library(png)
setwd("~/Developments/csci454-biometrics/hw/hw02")
img1 = readPNG("~/Developments/csci454-biometrics/hw/hw02/trainingfaces2/1_0.png")
vec_img = as.vector(img1)
vec_img
img1 = readPNG("~/Developments/csci454-biometrics/hw/hw02/trainingfaces2/1_0.png")
vec_img1 = as.vector(img1)
dim(img1)
length(img1)
img2 = readPNG("~/Developments/csci454-biometrics/hw/hw02/trainingfaces2/2_0.png")
vec_img2 = as.vector(img2)
length(vec_img1)
length(vec_img1)
vec_img1 -> testVariable
x = cbind(vec_img1, testVariable)
dim(x)
View(x)
x = cbind(vec_img1, vec_img2)
View(x)
?t
ll = list(1:5, 6:8)
transpose(ll)
setDT(transpose(ll, fill=0))[]
dt = data.table(x=1:5, y=6:10)
transpose(dt)
ll = list(1:5, 6:8)
View(ll)
ll
t(ll)
dt = data.table(x=1:5, y=6:10)
images.matrix = cbind(vec_img1, vec_img2)
View(images.matriz)
View(images.matrix)
dim(images.matriz)
dim(images.matrix)
length(images.matrix)
library("png")
# Reading in training image 1
img1 = readPNG("~/Developments/csci454-biometrics/hw/hw02/trainingfaces2/1_0.png")
vec_img1 = as.vector(img1)
img2 = readPNG("~/Developments/csci454-biometrics/hw/hw02/trainingfaces2/2_0.png")
vec_img2 = as.vector(img2)
images.matrix = cbind(vec_img1, vec_img2)
images.matrix = t(images.matrix)
filepath = "~/Downloads/trainingfaces/"
filenames = list.files(filepath, pattern = "*.png")
fullpathnames = paste(filepath, filenames, sep="")
fullpathnames
filepath = "~/Developments/csci454-biometrics/hw/hw02/trainingfaces2/"
filenames = list.files(filepath, pattern = "*.png")
fullpathnames = paste(filepath, filenames, sep="")
filenames
View(filenames)
View(filenames)
fullpathnames
shiny::runApp('~/Developments/math216-datascience/lectures/10.30')
runApp('~/Developments/math216-datascience/lectures/10.30')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='mjpascual', token='01F670E5DDA38560638E39FF89890049', secret='ku6eH9XZyBj48wRyuWVMbquiPi+m1nMR2vxM/zL0')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
runApp('~/Developments/math216-datascience/lectures/10.30')
runApp('~/Developments/math216-datascience/lectures/10.30.more')
install.packages(leaflet)
install.packages("leaflet
"")
install.packages("leaflet
"")
install.packages("leaflet")
library(leaflet)
library(leaflet)
install.packages("leaflet")
install.packages("leaflet")
library(leaflet)
let)
leaflet() %>%
addTiles()
leaflet() %>%
addTiles()
library(leaflet)
leaflet() %>%
addTiles() %>% ## creates a world map
addMarkers(lng = -73.1755, lat = 44.01005)
## generate random coordinates
dataset1 <- data.frame(lat = 1:10, long = rnorm(10, sd = 10))
leaflet(dataset1) %>%
addTiles() %>%
addCircles()
## generate random coordinates
dataset1 <- data.frame(lat = 1:10, long = rnorm(10, sd = 10))
leaflet(dataset1) %>%
addTiles() %>%
addCircles()
## generate random coordinates
dataset1 <- data.frame(lat = 1:10, long = rnorm(10, sd = 10))
leaflet(dataset1) %>%
addTiles() %>%
addCircles()
## generate random coordinates
dataset1 <- data.frame(lat = 1:10, long = rnorm(10, sd = 10))
leaflet(dataset1) %>%
addTiles() %>%
addCircles()
leaflet(dataset1) %>%
addTiles() %>%
addMarkers(lng = -x, lat = -y)
## generate random coordinates
dataset1 <- data.frame(y = 1:10, x = rnorm(10, sd = 10))
leaflet(dataset1) %>%
addTiles() %>%
addMarkers(lng = -x, lat = -y)
dataset1 <- data.frame(y = 1:10, x = rnorm(10, sd = 10))
leaflet(dataset1) %>%
addTiles() %>%
addMarkers(lng = -x, lat = -y)
library(leaflet)
dataset1 <- data.frame(y = 1:10, x = rnorm(10, sd = 10))
leaflet(dataset1) %>%
addTiles() %>%
addMarkers(lng = -x, lat = -y)
leaflet(dataset1) %>%
addTiles() %>%
addMarkers(lng = ~x, lat = ~y)
